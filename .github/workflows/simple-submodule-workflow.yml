name: Submodule Creation Workflow

on:
  pull_request:
    types: [closed]

permissions:
  contents: write
  pull-requests: write
  repository-projects: write

jobs:
  create-submodule:
    # Only run if PR is merged
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.ORG_ADMIN_TOKEN }}

    - name: Extract Metadata
      id: extract-metadata
      run: |
        # Extract submodule name and organization from PR body or use a default naming convention
        SUBMODULE_NAME=$(echo "${{ github.event.pull_request.title }}" | tr '[:upper:]' '[:lower:]' | sed 's/[^a-z0-9]/-/g')
        ORG_NAME="dsrctest"  # Your organization name
        
        echo "submodule_name=${SUBMODULE_NAME}" >> $GITHUB_OUTPUT
        echo "org_name=${ORG_NAME}" >> $GITHUB_OUTPUT
        echo "repo_name=${ORG_NAME}/${SUBMODULE_NAME}-source" >> $GITHUB_OUTPUT

    - name: Create Organization Repository
      env:
        GH_TOKEN: ${{ secrets.ORG_ADMIN_TOKEN }}
      run: |
        # Create repository in the organization
        REPO_NAME="${{ steps.extract-metadata.outputs.submodule_name }}-source"
        
        # Check if repository already exists
        if ! gh repo view "${{ steps.extract-metadata.outputs.org_name }}/$REPO_NAME" >/dev/null 2>&1; then
          # Create new repository in the organization
          gh repo create "$REPO_NAME" \
            --org "${{ steps.extract-metadata.outputs.org_name }}" \
            --private \
            --description "Source repository for ${{ steps.extract-metadata.outputs.submodule_name }}"
        else
          echo "Repository already exists"
        fi

    - name: Prepare Repository Content
      run: |
        # Create a temporary directory for repository preparation
        TEMP_DIR=$(mktemp -d)
        SUBMODULE_NAME="${{ steps.extract-metadata.outputs.submodule_name }}"
        
        # Copy relevant files/folders to temp directory
        cp -r "$SUBMODULE_NAME"/* "$TEMP_DIR/"
        
        # Create a README if no files exist
        if [ -z "$(ls -A "$TEMP_DIR")" ]; then
          echo "# $SUBMODULE_NAME Source Repository" > "$TEMP_DIR/README.md"
        fi

    - name: Push Content to Organization Repository
      env:
        GH_TOKEN: ${{ secrets.ORG_ADMIN_TOKEN }}
      run: |
        # Clone the newly created repository
        REPO_URL="https://github.com/${{ steps.extract-metadata.outputs.org_name }}/${{ steps.extract-metadata.outputs.submodule_name }}-source.git"
        TEMP_DIR=$(mktemp -d)
        
        # Clone the repository
        git clone "$REPO_URL" "$TEMP_DIR"
        
        # Copy prepared content
        cp -r "${{ steps.extract-metadata.outputs.submodule_name }}"/* "$TEMP_DIR/"
        
        # Configure git
        cd "$TEMP_DIR"
        git config user.name "GitHub Action"
        git config user.email "action@github.com"
        
        # Add and commit content
        git add .
        git commit -m "Initial commit: Add source content for ${{ steps.extract-metadata.outputs.submodule_name }}"
        git push origin main

    - name: Convert to Submodule
      run: |
        # Create a new branch for submodule conversion
        BRANCH_NAME="submodule-conversion-$(date +%Y%m%d%H%M%S)"
        git checkout -b "$BRANCH_NAME"
        
        # Remove existing folder
        SUBMODULE_NAME="${{ steps.extract-metadata.outputs.submodule_name }}"
        git rm -rf "$SUBMODULE_NAME"
        
        # Add as submodule
        REPO_URL="https://github.com/${{ steps.extract-metadata.outputs.org_name }}/$SUBMODULE_NAME-source.git"
        git submodule add "$REPO_URL" "$SUBMODULE_NAME"
        
        # Commit submodule changes
        git add .gitmodules "$SUBMODULE_NAME"
        git commit -m "Convert $SUBMODULE_NAME to submodule"
        
        # Push the branch
        git push -u origin "$BRANCH_NAME"

    - name: Create Pull Request for Submodule Merge
      env:
        GH_TOKEN: ${{ secrets.ORG_ADMIN_TOKEN }}
      run: |
        # Create a PR to merge submodule conversion branch
        BRANCH_NAME="submodule-conversion-$(date +%Y%m%d%H%M%S)"
        gh pr create \
          --base main \
          --head "$BRANCH_NAME" \
          --title "Convert ${{ steps.extract-metadata.outputs.submodule_name }} to Submodule" \
          --body "Automated PR to convert ${{ steps.extract-metadata.outputs.submodule_name }} to a submodule"

    - name: Error Handling
      if: failure()
      uses: actions/github-script@v6
      with:
        github-token: ${{secrets.ORG_ADMIN_TOKEN}}
        script: |
          core.setFailed('Submodule creation workflow failed')
