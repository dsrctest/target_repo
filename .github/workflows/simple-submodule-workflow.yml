name: Simple Submodule Workflow

on:
  pull_request:
    types: [opened, closed]
    branches: [main]
  workflow_dispatch:
    inputs:
      folder_name:
        description: 'Folder name to convert to submodule'
        required: true
        type: string
      new_repo:
        description: 'New repository name (owner/repo-name)'
        required: true
        type: string

permissions:
  contents: write
  pull-requests: write
  actions: read

jobs:
  convert-to-submodule:
    if: github.event_name == 'workflow_dispatch' || (github.event_name == 'pull_request' && github.event.pull_request.merged == true)
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.ORG_ADMIN_TOKEN || secrets.GITHUB_TOKEN }}
        submodules: false

    - name: Extract metadata
      id: meta
      run: |
        echo "üîç Extracting metadata..."
        echo "Event: ${{ github.event_name }}"
        
        # Check if this is a manual trigger or PR merge
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          # Manual trigger - use inputs
          FOLDER_NAME="${{ inputs.folder_name }}"
          NEW_REPO="${{ inputs.new_repo }}"
          ORG_NAME=$(echo "$NEW_REPO" | cut -d'/' -f1)
          echo "üìù Manual trigger: $FOLDER_NAME -> $NEW_REPO"
        else
          # PR merge - extract from PR body
          echo "üìù Extracting from PR body..."
          BODY=$(jq -r '.pull_request.body // "N/A"' "$GITHUB_EVENT_PATH")
          echo "PR Body preview: $(echo "$BODY" | head -c 200)..."
          
          # Extract folder name - look for "Add folder: " pattern first (from pr_tool.py)
          FOLDER_NAME=$(echo "$BODY" | grep -oE 'Add folder: ([^(]+)' | sed 's/Add folder: //' | head -1)
          
          # Clean the folder name (remove ALL leading/trailing whitespace)
          FOLDER_NAME=$(echo "$FOLDER_NAME" | sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//')
          
          # If not found, try to get from commit messages
          if [ -z "$FOLDER_NAME" ]; then
            echo "‚ö†Ô∏è  Could not extract folder name from PR body, trying commit messages..."
            FOLDER_NAME=$(git log --oneline -10 | grep -oE 'Add folder: ([^(]+)' | sed 's/Add folder: //' | head -1 | sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//')
            if [ -z "$FOLDER_NAME" ]; then
              echo "‚ùå No folder name found, exiting"
              exit 1
            fi
          fi
          
          # Extract org name
          ORG_NAME=$(echo "$BODY" | grep -oE 'submodule_org: ([^\\n]+)' | sed 's/submodule_org: //' | tr -d ' ')
          if [ -z "$ORG_NAME" ]; then
            ORG_NAME=$(echo "$BODY" | grep -oE 'Submodule-Org:[ ]*([^[:space:]\\n]+)' | sed 's/Submodule-Org:[ ]*//')
          fi
          
          if [ -z "$ORG_NAME" ]; then
            ORG_NAME="dsrctest"
          fi
          
          NEW_REPO="$ORG_NAME/$FOLDER_NAME"
          
          echo "üì¶ Extracted metadata:"
          echo "  Folder: $FOLDER_NAME"
          echo "  Org: $ORG_NAME"
          echo "  Repo: $NEW_REPO"
        fi
        
        echo "folder_name=$FOLDER_NAME" >> $GITHUB_OUTPUT
        echo "org_name=$ORG_NAME" >> $GITHUB_OUTPUT
        echo "new_repo=$NEW_REPO" >> $GITHUB_OUTPUT

    - name: Verify folder exists
      run: |
        FOLDER="${{ steps.meta.outputs.folder_name }}"
        FOLDER=$(printf '%s' "$FOLDER" | sed -e 's/^[[:space:]]\+//' -e 's/[[:space:]]\+$//')
        echo "üîç Checking if folder '$FOLDER' exists..."
        
        if [ ! -d "$FOLDER" ]; then
          echo "‚ùå Folder '$FOLDER' not found"
          echo "üìÅ Available directories:"
          ls -la
          exit 1
        fi
        
        echo "‚úÖ Folder '$FOLDER' exists"

    - name: Configure Git
      run: |
        git config user.name "${{ github.actor }}"
        git config user.email "${{ github.actor }}@users.noreply.github.com"

    - name: Create new repository
      env:
        GH_TOKEN: ${{ secrets.ORG_ADMIN_TOKEN || secrets.GITHUB_TOKEN }}
      run: |
        NEW_REPO="${{ steps.meta.outputs.new_repo }}"
        
        echo "üèóÔ∏è Creating repository: $NEW_REPO"
        
        # Check if repository already exists
        if gh repo view "$NEW_REPO" >/dev/null 2>&1; then
          echo "‚ö†Ô∏è  Repository $NEW_REPO already exists - will use existing"
        else
          echo "üî® Creating new repository: $NEW_REPO"
          gh repo create "$NEW_REPO" \
            --private \
            --description "Source repository for ${{ steps.meta.outputs.folder_name }} submodule" \
            --confirm
        fi

    - name: Push folder content to new repository
      env:
        GH_TOKEN: ${{ secrets.ORG_ADMIN_TOKEN || secrets.GITHUB_TOKEN }}
      run: |
        FOLDER="${{ steps.meta.outputs.folder_name }}"
        NEW_REPO="${{ steps.meta.outputs.new_repo }}"
        
        echo "üìÇ Pushing folder '$FOLDER' to repository '$NEW_REPO'"
        
        # Create temporary directory
        TMPDIR=$(mktemp -d)
        cd "$TMPDIR"
        
        # Clone the repository
        gh repo clone "$NEW_REPO" repo
        cd repo
        
        # Copy folder content
        cp -r "$GITHUB_WORKSPACE/$FOLDER"/* .
        
        # Configure git
        git config user.name "${{ github.actor }}"
        git config user.email "${{ github.actor }}@users.noreply.github.com"
        
        # Add and commit changes
        git add .
        git commit -m "Add $FOLDER source content"
        
        # Push changes
        gh auth setup-git
        git push origin main
        
        echo "‚úÖ Successfully pushed content to $NEW_REPO"

    - name: Convert to submodule
      env:
        GH_TOKEN: ${{ secrets.ORG_ADMIN_TOKEN || secrets.GITHUB_TOKEN }}
      run: |
        FOLDER="${{ steps.meta.outputs.folder_name }}"
        NEW_REPO="${{ steps.meta.outputs.new_repo }}"
        REPO_URL="https://github.com/$NEW_REPO.git"
        
        echo "üîó Converting '$FOLDER' to submodule from '$NEW_REPO'"
        
        # Configure Git authentication
        gh auth setup-git
        
        # Remove existing folder
        git rm -rf "$FOLDER" || true
        
        # Add as submodule
        git submodule add "$REPO_URL" "$FOLDER"
        
        # Commit submodule addition
        git add .gitmodules "$FOLDER"
        git commit -m "Convert $FOLDER to submodule from $NEW_REPO"

    - name: Push changes to main
      env:
        GH_TOKEN: ${{ secrets.ORG_ADMIN_TOKEN || secrets.GITHUB_TOKEN }}
      run: |
        echo "üöÄ Pushing submodule changes to main branch"
        
        # Configure Git authentication
        gh auth setup-git
        
        # Pull latest changes first
        git pull origin main --no-edit || echo "Pull failed, continuing..."
        
        # Push changes
        git push origin main || {
          echo "‚ùå Standard push failed, trying force push..."
          git push --force-with-lease origin main
        }
        
        echo "‚úÖ Successfully converted ${{ steps.meta.outputs.folder_name }} to submodule"
        echo "üîó Repository: https://github.com/${{ steps.meta.outputs.new_repo }}"
