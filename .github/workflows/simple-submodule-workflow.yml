name: Simple Submodule Workflow

on:
  pull_request:
    types: [opened, closed]
    branches: [main]
  workflow_dispatch:
    inputs:
      folder_name:
        description: 'Folder name to convert to submodule'
        required: true
        type: string
      new_repo:
        description: 'New repository name (owner/repo-name)'
        required: true
        type: string

permissions:
  contents: write
  pull-requests: write
  actions: read

jobs:
  convert-to-submodule:
    if: github.event_name == 'workflow_dispatch' || (github.event_name == 'pull_request' && github.event.pull_request.merged == true)
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.ORG_ADMIN_TOKEN || secrets.GITHUB_TOKEN }}
        submodules: false  # Don't initialize submodules to avoid conflicts

    - name: Extract metadata
      id: meta
      run: |
        echo "🔍 Extracting metadata..."
        echo "Event: ${{ github.event_name }}"
        
        # Check if this is a manual trigger or PR merge
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          # Manual trigger - use inputs
          FOLDER_NAME="${{ inputs.folder_name }}"
          NEW_REPO="${{ inputs.new_repo }}"
          ORG_NAME=$(echo "$NEW_REPO" | cut -d'/' -f1)
          # Trim whitespace
          FOLDER_NAME=$(echo "$FOLDER_NAME" | xargs)
          ORG_NAME=$(echo "$ORG_NAME" | xargs)
          # Recompute NEW_REPO after trim
          NEW_REPO="$ORG_NAME/$FOLDER_NAME"
          echo "📝 Manual trigger: $FOLDER_NAME -> $NEW_REPO"
        else
          # PR merge - extract from PR body
          echo "📝 Extracting from PR body..."
          BODY=$(jq -r '.pull_request.body // "N/A"' "$GITHUB_EVENT_PATH")
          echo "PR Body preview: $(echo "$BODY" | head -c 200)..."
          
          # Extract folder name - look for "Add folder: " pattern first
          FOLDER_NAME=$(echo "$BODY" | grep -oE 'Add folder: ([^(]+)' | sed 's/Add folder: //' | head -1)
          
          # If not found, try submodule metadata
          if [ -z "$FOLDER_NAME" ]; then
            FOLDER_NAME=$(echo "$BODY" | grep -oE 'submodule_name: ([^\\n]+)' | sed 's/submodule_name: //' | tr -d ' ')
          fi
          
          # If still not found, try old format
          if [ -z "$FOLDER_NAME" ]; then
            FOLDER_NAME=$(echo "$BODY" | grep -oE 'Submodule-Name:[ ]*([^[:space:]\\n]+)' | sed 's/Submodule-Name:[ ]*//')
          fi
          
          # Extract org name
          ORG_NAME=$(echo "$BODY" | grep -oE 'submodule_org: ([^\\n]+)' | sed 's/submodule_org: //' | tr -d ' ')
          if [ -z "$ORG_NAME" ]; then
            ORG_NAME=$(echo "$BODY" | grep -oE 'Submodule-Org:[ ]*([^[:space:]\\n]+)' | sed 's/Submodule-Org:[ ]*//')
          fi
          
          # Default values if not found
          if [ -z "$FOLDER_NAME" ]; then
            echo "⚠️  Could not extract folder name from PR body"
            # Try to get from commit messages
            FOLDER_NAME_LIST=$(git log --oneline -10 | grep -oE 'Add folder: ([^(]+)' | sed 's/Add folder: //' | head -1)
            if [ -n "$FOLDER_NAME_LIST" ]; then
              FOLDER_NAME="$FOLDER_NAME_LIST"
              echo "📝 Found folder name from commit: $FOLDER_NAME"
            else
              echo "❌ No folder name found, using fallback"
              exit 1
            fi
          fi
          
          if [ -z "$ORG_NAME" ]; then
            ORG_NAME="dsrctest"
          fi
          # Trim whitespace from extracted values
          FOLDER_NAME=$(echo "$FOLDER_NAME" | xargs)
          ORG_NAME=$(echo "$ORG_NAME" | xargs)
          
          NEW_REPO="$ORG_NAME/$FOLDER_NAME"
          
          echo "📦 Extracted metadata:"
          echo "  Folder: $FOLDER_NAME"
          echo "  Org: $ORG_NAME"
          echo "  Repo: $NEW_REPO"
        fi
        
        echo "folder_name=$FOLDER_NAME" >> $GITHUB_OUTPUT
        echo "org_name=$ORG_NAME" >> $GITHUB_OUTPUT
        echo "new_repo=$NEW_REPO" >> $GITHUB_OUTPUT

    - name: Clean up broken submodules
      run: |
        echo "🧹 Cleaning up any broken submodules..."
        
        # Check if .gitmodules exists and fix any broken entries
        if [ -f .gitmodules ]; then
          echo "📋 Checking .gitmodules file..."
          cat .gitmodules
          
          # Fix any submodules with missing URLs (comment them out)
          sed -i 's/\[submodule "deepcraft44"\]/\[submodule "deepcraft44"-disabled\]/' .gitmodules || true
          
          echo "✅ Cleaned up broken submodule references"
        fi

    - name: Verify folder exists
      run: |
        # Trim any accidental whitespace in folder name
        FOLDER="${{ steps.meta.outputs.folder_name }}"
        FOLDER=$(echo "$FOLDER" | xargs)
        echo "🔍 Checking if folder $FOLDER exists..."
        
        if [ ! -d "$FOLDER" ]; then
          echo "❌ ERROR: Folder '$FOLDER' not found in workspace"
          echo "📁 Available directories:"
          ls -la
          echo "📂 Contents of root:"
          find . -maxdepth 2 -type d | head -20
          exit 1
        fi
        
        echo "✅ Folder '$FOLDER' exists"
        echo "📊 Folder contents:"
        ls -la "$FOLDER"
        echo "📊 File count: $(find "$FOLDER" -type f | wc -l)"

    - name: Configure Git
      run: |
        git config user.name "${{ github.actor }}"
        git config user.email "${{ github.actor }}@users.noreply.github.com"
        echo "Git user configured: ${{ github.actor }}"
        
    - name: Setup GitHub CLI
      env:
        GH_TOKEN: ${{ secrets.ORG_ADMIN_TOKEN || secrets.GITHUB_TOKEN }}
      run: |
        # Setup GitHub CLI authentication
        gh auth setup-git
        echo "GitHub CLI authenticated"
        
        # Verify authentication
        gh auth status
        echo "✅ GitHub CLI ready"

    - name: "Step 1: Create new repository in organization"
      env:
        GH_TOKEN: ${{ secrets.ORG_ADMIN_TOKEN || secrets.GITHUB_TOKEN }}
      run: |
        NEW_REPO="${{ steps.meta.outputs.new_repo }}"
        FOLDER="${{ steps.meta.outputs.folder_name }}"
        
        echo "🏗️ STEP 1: Creating new repository '$NEW_REPO' in organization"
        echo "📋 Repository will be created as: $NEW_REPO"
        
        # Check if repository already exists
        if gh repo view "$NEW_REPO" >/dev/null 2>&1; then
          echo "⚠️  Repository $NEW_REPO already exists - will skip creation"
        else
          echo "🔨 Creating new organization repository: $NEW_REPO"
          
          # Create repository in organization (correct syntax for modern GitHub CLI)
          DESCRIPTION="Source repository for '$FOLDER' submodule (auto-generated from PR #${{ github.event.pull_request.number }})"
          
          echo "Creating repository with description: $DESCRIPTION"
          
          if gh repo create "$NEW_REPO" \
            --private \
            --description "$DESCRIPTION" \
            --confirm; then
            
            echo "✅ Successfully created repository: $NEW_REPO"
            
            # Wait for GitHub to properly initialize the repository
            echo "⏳ Waiting for repository initialization..."
            sleep 15
            
            # Verify repository was created successfully
            if gh repo view "$NEW_REPO" >/dev/null 2>&1; then
              echo "✅ Repository $NEW_REPO fully initialized and ready"
              echo "🔗 Repository URL: https://github.com/$NEW_REPO"
            else
              echo "❌ Failed to verify repository creation"
              echo "🔍 Attempting repository view for debugging..."
              gh repo view "$NEW_REPO" || echo "Repository not accessible"
              exit 1
            fi
          else
            echo "❌ Failed to create repository: $NEW_REPO"
            echo "🔍 Debug: Checking organization access..."
            gh auth status
            exit 1
          fi
        fi

    - name: "Step 2: Push local files to new repository"
      env:
        GH_TOKEN: ${{ secrets.ORG_ADMIN_TOKEN || secrets.GITHUB_TOKEN }}
      run: |
        # Trim any accidental whitespace in folder name
        FOLDER="${{ steps.meta.outputs.folder_name }}"
        FOLDER=$(echo "$FOLDER" | xargs)
        NEW_REPO="${{ steps.meta.outputs.new_repo }}"
        NEW_REPO=$(echo "$NEW_REPO" | xargs)
        
        echo "📂 STEP 2: Pushing all files from local folder '$FOLDER' to new repository '$NEW_REPO'"
        echo "📁 Source folder: $FOLDER"
        echo "🏗️ Target repository: $NEW_REPO"
        
        # Create temporary directory
        TMPDIR=$(mktemp -d)
        echo "📁 Using temporary directory: $TMPDIR"
        
        cd "$TMPDIR"
        
        # Clone the new repository
        echo "🔄 Cloning repository: $NEW_REPO"
        gh repo clone "$NEW_REPO" repo || {
          echo "❌ Failed to clone repository"
          exit 1
        }
        
        cd repo
        echo "✅ Successfully cloned repository"
        
        # Copy folder content
        echo "📄 Copying folder contents..."
        if [ -d "$GITHUB_WORKSPACE/$FOLDER" ] && [ "$(ls -A "$GITHUB_WORKSPACE/$FOLDER" 2>/dev/null)" ]; then
          echo "📋 Copying files from $FOLDER"
          cp -r "$GITHUB_WORKSPACE/$FOLDER"/. .
          
          # Show what was copied
          echo "📊 Copied files:"
          find . -type f | head -20
          echo "📈 Total files: $(find . -type f | wc -l)"
        else
          echo "⚠️  Folder is empty, creating README"
          
          echo "# $FOLDER" > README.md
          echo "" >> README.md
          echo "This is the source repository for the $FOLDER submodule." >> README.md
          echo "" >> README.md
          echo "## Contents" >> README.md
          echo "This repository contains the source code for the $FOLDER component that is included as a submodule in the main project." >> README.md
          echo "" >> README.md
          echo "## Usage" >> README.md
          echo "This submodule is automatically managed by the main repository's workflow system." >> README.md
          echo "" >> README.md
          echo "*Generated automatically by GitHub Actions on $(date)*" >> README.md
        fi
        
        # Configure git for this repo
        git config user.name "${{ github.actor }}"
        git config user.email "${{ github.actor }}@users.noreply.github.com"
        
        # Add and commit
        git add .
        if git diff --staged --quiet; then
          echo "⚠️  No changes to commit"
        else
          git commit -m "Initial commit: Add $FOLDER source content - Auto-generated from main repository PR #${{ github.event.pull_request.number || 'manual' }}"
          echo "✅ Changes committed"
        fi
        
        # Push using GitHub CLI
        gh auth setup-git
        git push origin main
        
        echo "✅ Successfully pushed content to $NEW_REPO"

    - name: "Step 3: Convert original folder to submodule"
      env:
        GH_TOKEN: ${{ secrets.ORG_ADMIN_TOKEN || secrets.GITHUB_TOKEN }}
      run: |
        # Trim any accidental whitespace in folder name
        FOLDER="${{ steps.meta.outputs.folder_name }}"
        FOLDER=$(echo "$FOLDER" | xargs)
        NEW_REPO="${{ steps.meta.outputs.new_repo }}"
        NEW_REPO=$(echo "$NEW_REPO" | xargs)
        REPO_URL="https://${{ secrets.ORG_ADMIN_TOKEN || secrets.GITHUB_TOKEN }}@github.com/$NEW_REPO.git"
        
        echo "🔗 STEP 3: Converting original folder '$FOLDER' to submodule"
        echo "📂 Original folder: $FOLDER"
        echo "🏗️ New submodule source: $NEW_REPO"
        echo "🔗 Submodule URL: $REPO_URL"
        
        # Setup authentication
        gh auth setup-git
        
        # Remove existing folder and any broken submodules
        echo "🗑️ Removing existing folder and cleaning submodules..."
        
        # Clean up broken submodules first
        if [ -f .gitmodules ]; then
          echo "🧹 Fixing broken submodules in .gitmodules..."
          
          # Create a clean .gitmodules file without broken entries
          grep -v "deepcraft44" .gitmodules > .gitmodules.clean || cp .gitmodules .gitmodules.clean
          mv .gitmodules.clean .gitmodules
          
          echo "✅ Cleaned broken submodule entries"
        fi
        
        # Remove the target folder (both as regular folder and possibly as broken submodule)
        git rm -rf "$FOLDER" || {
          echo "⚠️  Could not remove folder with git (may not exist), trying direct removal..."
          rm -rf "$FOLDER" || echo "Folder not found or already removed"
        }
        
        # Add as submodule
        echo "➕ Adding submodule..."
        git submodule add "$REPO_URL" "$FOLDER" || {
          echo "❌ Failed to add submodule"
          git status
          exit 1
        }
        
        echo "✅ Submodule added successfully"
        
        # Commit submodule addition
        echo "💾 Committing submodule addition..."
        git add .gitmodules "$FOLDER"
        
        if git diff --staged --quiet; then
          echo "⚠️  No staged changes to commit"
        else
          git commit -m "Convert $FOLDER to submodule from $NEW_REPO - Automatically converted from folder to submodule after PR merge. Submodule source: https://github.com/$NEW_REPO"
          echo "✅ Submodule conversion committed"
        fi

    - name: "Step 4: Push submodule changes to main repository"
      env:
        GH_TOKEN: ${{ secrets.ORG_ADMIN_TOKEN || secrets.GITHUB_TOKEN }}
      run: |
        echo "🚀 STEP 4: Pushing submodule changes back to main repository"
        
        # Ensure authentication
        gh auth setup-git
        
        # Show status before push
        echo "📋 Git status:"
        git status
        
        # Push changes
        git push origin main || {
          echo "❌ Push failed, showing git configuration:"
          git config --list | grep -E "(user|remote)"
          git remote -v
          exit 1
        }
        
        echo "✅ Successfully pushed all changes"
        echo "🎉 Submodule conversion completed for '${{ steps.meta.outputs.folder_name }}'"

    - name: Handle workflow failure
      if: failure()
      run: |
        echo "❌ Workflow failed - investigating..."
        
        echo "📋 Current git status:"
        git status || echo "Git status failed"
        
        echo "📁 Current directory contents:"
        ls -la || echo "Directory listing failed"
        
        echo "🔗 Git configuration:"
        git config --list | grep -E "(user|remote)" || echo "Git config failed"
        
        echo "💾 Submodules status:"
        git submodule status || echo "Submodule status failed"
        
        echo "📄 .gitmodules content:"
        cat .gitmodules 2>/dev/null || echo "No .gitmodules file"
        
        echo "⚠️  Workflow will continue despite this error..."